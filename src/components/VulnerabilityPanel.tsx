import React, { useState } from 'react';
import { 
  ArrowLeft, 
  AlertTriangle, 
  GitPullRequest, 
  AlarmClock, 
  AlertCircle, 
  Check,
  Github,
  Code
} from 'lucide-react';
import { Badge } from '@/components/ui/badge';
import { Separator } from '@/components/ui/separator';
import { Button } from '@/components/ui/button';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { ScrollArea } from '@/components/ui/scroll-area';

interface VulnerabilityPanelProps {
  vulnerability: any;
  resource: any;
  onBack: () => void;
  onApplyFix: (vulnerability: any) => void;
}

// Helper function to get the severity color
const getSeverityColor = (severity: string) => {
  switch(severity) {
    case 'critical':
      return 'text-red-500 bg-red-50 border-red-200';
    case 'high':
      return 'text-orange-500 bg-orange-50 border-orange-200';
    case 'medium':
      return 'text-yellow-700 bg-yellow-50 border-yellow-200';
    case 'low':
      return 'text-blue-600 bg-blue-50 border-blue-200';
    default:
      return 'text-gray-500 bg-gray-50 border-gray-200';
  }
};

// Helper function to get the severity icon
const getSeverityIcon = (severity: string) => {
  switch(severity) {
    case 'critical':
    case 'high':
      return <AlertTriangle className="h-5 w-5" />;
    case 'medium':
    case 'low':
      return <AlertCircle className="h-5 w-5" />;
    default:
      return <AlertCircle className="h-5 w-5" />;
  }
};

export function VulnerabilityPanel({ vulnerability, resource, onBack, onApplyFix }: VulnerabilityPanelProps) {
  const [isApplyingFix, setIsApplyingFix] = useState(false);
  const [activeTab, setActiveTab] = useState('details');
  
  const handleApplyFix = () => {
    setIsApplyingFix(true);
    
    // Simulate API call to apply fix
    setTimeout(() => {
      setIsApplyingFix(false);
      onApplyFix(vulnerability);
    }, 1500);
  };
  
  const severityColorClass = getSeverityColor(vulnerability.severity);
  const SeverityIcon = getSeverityIcon(vulnerability.severity);
  
  const isFixed = vulnerability.status === 'fixed';

  return (
    <div className="flex flex-col h-full w-auto">
      <div className="p-6 border-b border-gray-200">
        <button 
          onClick={onBack}
          className="flex items-center text-sm text-gray-500 hover:text-gray-700 mb-4"
        >
          <ArrowLeft className="h-4 w-4 mr-1" />
          Back
        </button>
        
        <div className="flex items-start justify-between mb-4">
          <div>
            <h2 className="text-xl font-semibold mb-1">{vulnerability.title}</h2>
            <div className="flex items-center space-x-2">
              <Badge variant="outline" className={`flex items-center gap-1 ${severityColorClass}`}>
                {SeverityIcon}
                {vulnerability.severity.charAt(0).toUpperCase() + vulnerability.severity.slice(1)} Severity
              </Badge>
              <Badge variant="outline" className="flex items-center gap-1">
                {/* <AlarmClock className="h-3 w-3" /> */}
                Discovered {vulnerability.discoveredAt}
              </Badge>
            </div>
          </div>
          
          {!isFixed ? (
            <Button 
              onClick={handleApplyFix} 
              disabled={isApplyingFix}
              className="bg-green-600 hover:bg-green-700 text-white"
            >
              {isApplyingFix ? (
                <>
                  <svg className="animate-spin -ml-1 mr-2 h-4 w-4 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                    <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                    <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                  </svg>
                  Applying Fix...
                </>
              ) : (
                <>
                  Apply Suggested Fix
                </>
              )}
            </Button>
          ) : (
            <Badge className="bg-green-100 text-green-800 border-green-200 flex items-center gap-1 p-2">
              <Check className="h-4 w-4" />
              Fixed
            </Badge>
          )}
        </div>
      </div>
      
      <Tabs value={activeTab} onValueChange={setActiveTab} className="flex-1 flex flex-col">
        <div className="border-b border-gray-200 px-6">
          <TabsList className="bg-transparent h-12">
            <TabsTrigger value="details" className="data-[state=active]:bg-white">Details</TabsTrigger>
            <TabsTrigger value="pr" className="data-[state=active]:bg-white">GitHub PR</TabsTrigger>
            <TabsTrigger value="logs" className="data-[state=active]:bg-white">Threat Logs</TabsTrigger>
          </TabsList>
        </div>
        
        <TabsContent value="details" className="flex-1 p-6 m-0">
          <ScrollArea className="h-full">
            <div className="space-y-6">
              <div>
                <h3 className="text-lg font-medium mb-2">Description</h3>
                <p className="text-gray-700">{vulnerability.description}</p>
              </div>
              
              <div>
                <h3 className="text-lg font-medium mb-2">Impact</h3>
                <p className="text-gray-700">{vulnerability.impact}</p>
              </div>
              
              <div>
                <h3 className="text-lg font-medium mb-2">Affected Resource</h3>
                <div className="bg-gray-50 p-4 rounded-md border border-gray-200">
                  <p className="font-medium">{resource.name}</p>
                  <p className="text-sm text-gray-500">{resource.type} · {resource.id}</p>
                </div>
              </div>
              
              <div>
                <h3 className="text-lg font-medium mb-2">CVSS Score</h3>
                <div className="flex items-center space-x-2">
                  <div className={`text-xl font-bold py-1 px-3 rounded ${severityColorClass}`}>
                    {vulnerability.cvssScore || '8.5'}
                  </div>
                  <p className="text-gray-500">({vulnerability.severity} severity)</p>
                </div>
              </div>
            </div>
          </ScrollArea>
        </TabsContent>
        
        <TabsContent value="pr" className="flex-1 p-6 m-0">
          <ScrollArea className="h-full">
            <div className="space-y-6">
              <div className="bg-gray-50 border border-gray-200 rounded-md p-4 flex items-start justify-between mr-4">
                <div className="flex items-start space-x-3">
                  <div className="mt-1">
                    <Github className="h-5 w-5 text-gray-700" />
                  </div>
                  <div >
                    <h3 className="font-medium">Pull Request #{vulnerability.prNumber || '1234'}</h3>
                    <p className="text-sm text-gray-500 mb-1">fix: address {vulnerability.cve || 'CVE-2025-1234'} vulnerability</p>
                    <div className="flex items-center space-x-2 text-xs text-gray-500">
                      <span>Created by: {vulnerability.author || 'security-bot'}</span>
                      <span>•</span>
                      <span>2 days ago</span>
                    </div>
                  </div>
                </div>
              </div>
              
              <div>
                <h3 className="text-lg font-medium mb-2">Suggested Fix</h3>
                <Button className='bg-white border-grey-200 border hover:bg-white text-black'>
                  View Suggested Changes
                </Button>
                {/* <div className="bg-gray-900 text-gray-100 p-4 rounded-md font-mono text-sm ">
                  {/* <pre className=''>{vulnerability.suggestedFix || `
                  // Vulnerable code
                  const params = {
                    Bucket: bucketName,
                    ACL: 'public-read',  // Allows public read access
                  };

                  // Fixed code
                  const params = {
                    Bucket: bucketName,
                    ACL: 'private',  // Restricts access to authorized users only
                  };`}</pre> */}
                {/* </div>  */}
              </div>
              
              <div>
                <h3 className="text-lg font-medium mb-2">Changes</h3>
                <div className="border border-gray-200 rounded-md overflow-hidden">
                  <div className="bg-gray-50 border-b border-gray-200 px-4 py-2 font-medium text-sm">
                    config.json
                  </div>
                  <div className="p-4 font-mono text-sm">
                    <div className="flex">
                      <div className="bg-red-100 text-red-700 px-2">- "publicAccess": true,</div>
                    </div>
                    <div className="flex">
                      <div className="bg-green-100 text-green-700 px-2">+ "publicAccess": false,</div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </ScrollArea>
        </TabsContent>
        
        <TabsContent value="logs" className="flex-1 p-6 m-0">
          <ScrollArea className="h-full">
            <div className="space-y-6">
              <div>
                <h3 className="text-lg font-medium mb-2">Threat Detection Logs</h3>
                <p className="text-gray-700 mb-4">These logs show the detected activity related to this vulnerability.</p>
              
                <div className="space-y-3">
                  {Array.from({ length: 5 }).map((_, i) => (
                    <div key={i} className="bg-gray-50 border border-gray-200 rounded-md p-3">
                      <div className="flex justify-between mb-1">
                        <span className="font-medium text-sm">Unauthorized Access Attempt</span>
                        <span className="text-xs text-gray-500">
                          {new Date(Date.now() - i * 3600000).toLocaleString()}
                        </span>
                      </div>
                      <p className="text-sm text-gray-700 mb-2">
                        IP Address 203.0.113.{100 + i} attempted to access restricted resource
                      </p>
                      <div className="flex items-center text-xs text-gray-500">
                        <Code className="h-3 w-3 mr-1" />
                        <span>Source: CloudTrail</span>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            </div>
          </ScrollArea>
        </TabsContent>
      </Tabs>
    </div>
  );
}